(define (make-queue)
 (let ((front-ptr car))
 (rear-ptr cdr))
  (define (insert-queue! queue item)
      (let ((new-pair (cons item '())))
      (cond ((empty-queue? queue)
      (set-front-ptr! queue new-pair)
     (set-rear-ptr! queue new-pair)
        queue)
      (else
     (set-cdr! (rear-ptr queue) new-pair)
     (set-rear-ptr! queue new-pair)
       queue)))) 
   (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue"))
            (else
             (set! front-ptr (cdr front-ptr)))))
 (define (dispatch m)
        (cond ((eq m 'insert) insert-queue!)
              ((eq m 'delete) delete-queue!)
              (else (error "No such method"))))
 dispatch))
