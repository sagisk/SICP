(define (sum term a next b)
 (if (> a b)
 0
 (+ (term a)
 (sum term (next a) next b))))
 
(define (product term a next b) 
     (if (> a b) 1 
        (* (term a) (product term (next a) next b))))
;;accumulate-recursive 
(define (accumulate combiner null-value term a next b)
    (if (> a b)
          null-value
         (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))
                
;;accumualte-iterative
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a res)
       (if (> a res)
               res
           (iter (next a) (combiner (term a) res))))
    (iter a null-value))
