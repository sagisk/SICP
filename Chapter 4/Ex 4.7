(let* ((x 3)                             
   (y (+ x 2))
   (z (+ x y 5)))
 (* x z))
 
 is equivavlent to 
 (let ((x 3))
   (let ((y (+ x 2)))
     (let ((z (+ x y 5)))
 (* x z))))
 
  (let ((<var1> <exp1>) ... (<varn> <expn>))
                        <body>)
 (let* (var1 exp1)
       (var2 exp2)
       .
       .
       .
       body)
 
(define (let*->nested-lets exp env)
   (define (make-lets exps)
           (if (null? exps)
               (let*-body exps)
               (list 'let (list (cadr exps) (caddr exp))
               (make-lets (cadddr exps)))))
   (make-lets (cadr exp)))
