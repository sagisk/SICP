((application? exp)
 (apply (actual-value (operator exp) env)
 (operands exp)
 env))
 
 (define (actual-value exp env)
 (force-it (eval exp env)))
 
 (define (apply procedure arguments env)
 (cond ((primitive-procedure? procedure)
 (apply-primitive-procedure
 procedure
 (list-of-arg-values arguments env))) ; changed
 ((compound-procedure? procedure)
 (eval-sequence
 (procedure-body procedure)
 (extend-environment
 (procedure-parameters procedure)
 (list-of-delayed-args arguments env) ; changed
 (procedure-environment procedure))))
 (else
 (error
 "Unknown procedure type -- APPLY" procedure))))

(define (list-of-arg-values exps env)
 (if (no-operands? exps)
 '()
 (cons (actual-value (first-operand exps) env)
 (list-of-arg-values (rest-operands exps)
 env))))
(define (list-of-delayed-args exps env)
 (if (no-operands? exps)
 '()
 (cons (delay-it (first-operand exps) env)
 (list-of-delayed-args (rest-operands exps)
 env))))
 
 (define (eval-if exp env)
 (if (true? (actual-value (if-predicate exp) env))
 (eval (if-consequent exp) env)
 (eval (if-alternative exp) env)))
 
 ----------------------------------------------------------------------
 THUNKS--have exp and env delayed
 (define (force-it obj)
 (if (thunk? obj)
 (actual-value (thunk-exp obj) (thunk-env obj))
 obj))
 
 (define (delay-it exp env)
 (list 'thunk exp env))
 
 (define (thunk? obj)
 (tagged-list? obj 'thunk))
(define (thunk-exp thunk) (cadr thunk))
(define (thunk-env thunk) (caddr thunk))
 
