by adding a new clause to the deriv program and defining appropriate procedures exponentiation?,
base, exponent, and make-exponentiation. (You may use the symbol ** to denote
exponentiation.) 
Build in the rules that anything raised to the power 0 is 1 and anything raised to the power
1 is the thing itself. 

(define (base exp) (cadr exp))
(define (exponent exp) (caddr exp))

;;doesn't work, don't know why
(define (exponentiation? exp)
    (and (pair? exp) (eq? (car exp) '^)))
    
(define (make-exponentiation base exponent)
   (cond ((= number? base 0) 0)
         ((or (= number? base 1) (= number? exponent 0)) 1)
         ((= number? exponent 1) base)
         ((and (number? base) (number? exponent)) (expon base exponent))
         (else (list '^ base exponent))))
         
(define (expon base power)
   (if (= power 0)
           1
  (* base (expon base (- power 1))))
  
  ;;finaly
  (define (deriv exp var) 
   (cond ((number? exp) 0) 
         ((variable? exp) 
          (if (same-variable? exp var) 1 0)) 
         ((sum? exp) 
          (make-sum (deriv (addend exp) var) 
                    (deriv (augend exp) var))) 
         ((product? exp) 
          (make-sum 
            (make-product (multiplier exp) 
                          (deriv (multiplicand exp) var)) 
            (make-product (deriv (multiplier exp) var) 
                          (multiplicand exp)))) 
         ((exponentiation? exp) 
             (make-product 
                 (make-product (exponent exp)
                               (make-exponentiation (base exp)
                                       (if (number? (exponent exp))  
                                 (- (exponent exp) 1) 
                                 (' (- (exponent exp) 1)))))
                           (deriv  (base exp) var)))       
         (else 
          (error "unknown expression type -- DERIV" exp)))) 
