 (define (count-leaves x)
    (cond ((null? x) 0)
    ((not (pair? x)) 1)
          (else (+ (count-leaves (car x))
          (count-leaves (cdr x)))))
     
(define (accumulate op initial sequence)
 (if (null? sequence)
 initial
 (op (car sequence)
 (accumulate op initial (cdr sequence)))))
          
          
 (define (count-leaves t)
        (accumulate + 
                    0 
        (map (lambda (x) 1) (enumarate-tree t))))
        
 ;;or
 
 (define (count-leaves t)
   (accumulate +
               0
             (map (lambda(xt)
                         (cond ((null? t) 0)
                         ((not (pair? t)) 1)
                         (else (count-leaves (cdr t)))
                         t)))
;;the last one didn't work correctly
