(define (eval exp env);;firstly we analyze exp than evaluate it
((analyze exp) env))

(define (analyze exp)
 (cond ((self-evaluating? exp)
              (analyze-self-evaluating exp))
       ((quoted? exp) (analyze-quoted exp))
       ((variable? exp) (analyze-variable exp))
       ((assignment? exp) (analyze-assignment exp))
       ((definition? exp) (analyze-definition exp))
       ((if? exp) (analyze-if exp))
       ((lambda? exp) (analyze-lambda exp))
       ((begin? exp) (analyze-sequence (begin-actions exp)))
       ((cond? exp) (analyze (cond->if exp)))
       ((application? exp) (analyze-application exp))
 (else
 (error "Unknown expression type -- ANALYZE" exp))))
 
 ;;analyze just parse the expressions without evaluating them. To be sure that exp can be further evaluated we must provide env.
 
(define (analyze-self-evaluating exp)
         (lambda(env) exp))
         
(define (analyze-quoted exp) (let ((quoted (text-of-quotation exp))) (lambda(env) quoted)))
 
(define (analyze-variable exp)
  (lambda(env) (look-up-variable exp env)))
  
(define (analyze-assignment exp)
  (let ((var (assign-var exp))
        (val (analyze (assign-val exp));; analyze values and leave them as they are in an env
       (lambda(env)
       (set-variable-value! var (val env) env)
 'ok)))
 
(define (analyze-definition exp)
  (let ((var (def-var exp))
        (val (analyze (def-val exp))
       (lambda(env)
       (define-variable! var (val env) env)
 'ok)))
 
 (define (analyze-if exp)
   (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
        (lambda (env)
        (if (true? (eval pproc env))
             (cproc env)
             (aproc env)))))
            
(define (analyze-lambda exp)
 (let ((vars (lambda-parameters exp))
 (bproc (analyze-sequence (lambda-body exp))))
 (lambda (env) (make-procedure vars bproc env))))

(define (analyze-sequence exps);; sequentially put paramters with env in pairs
  (define (sequentially proc1 proc2)
 (lambda (env) (proc1 env) (proc2 env)))
 (define (loop first-proc rest-procs)
 (if (null? rest-procs)
 first-proc
 (loop (sequentially first-proc (car rest-procs))
 (cdr rest-procs))))
 (let ((procs (map analyze exps)))
 (if (null? procs)
 (error "Empty sequence -- ANALYZE"))
 (loop (car procs) (cdr procs))))
 
 (define (analyze-application exp)
 (let ((fproc (analyze (operator exp)))
      (aprocs (map analyze (operands exp))))
 (lambda (env)
 (execute-application (fproc env)
                      (map (lambda (aproc) (aproc env))
                       aprocs)))))

(define (execute-application proc args)
 (cond ((primitive-procedure? proc)
 (apply-primitive-procedure proc args))
 ((compound-procedure? proc)
 ((procedure-body proc)
 (extend-environment (procedure-parameters proc)
 args
 (procedure-environment proc))))
 (else
 (error
 "Unknown procedure type -- EXECUTE-APPLICATION"
 proc))))

